import heapq

# 맨해튼 거리 계산 함수
def manhattan(puzzle, goal):
    distance = 0
    for num in range(1, 10):  # 0(빈칸)은 계산 제외
        i = puzzle.index(num)
        gi = goal.index(num)
        x1, y1 = divmod(i, 5)
        x2, y2 = divmod(gi, 5)
        distance += abs(x1 - x2) + abs(y1 - y2)
    return distance

# A* 알고리즘 구현
def a_star(start, goal):
    start_tuple = tuple(start)
    goal_tuple = tuple(goal)
    pq = []
    heapq.heappush(pq, (manhattan(start, goal), 0, start_tuple))  # (f=g+h, g, 상태)
    visited = set()
    visited.add(start_tuple)

    while pq:
        f, g, current = heapq.heappop(pq)

        if current == goal_tuple:
            return g  # 최소 이동 횟수 반환

        zero_idx = current.index(0)
        x, y = divmod(zero_idx, 5)

        for dx, dy in [(-1,0), (1,0), (0,-1), (0,1)]:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 2 and 0 <= ny < 5:
                nidx = nx * 5 + ny
                new = list(current)
                new[zero_idx], new[nidx] = new[nidx], new[zero_idx]
                new_tuple = tuple(new)
                if new_tuple not in visited:
                    visited.add(new_tuple)
                    h = manhattan(new, goal)
                    heapq.heappush(pq, (g + 1 + h, g + 1, new_tuple))
    return -1  # 도달 불가능한 경우

# 예시 입력
start = [1, 2, 3, 4, 5,
         6, 7, 8, 0, 9]

goal = [1, 2, 3, 4, 5,
        6, 7, 8, 9, 0]

# 실행
moves = a_star(start, goal)
print(f"🔢 최소 이동 횟수: {moves}")
